@mixin gro-button($config) {
  $typography: map-get(map-get($config, typography), buttons);
  $colors: map-get($config, colors);
  $sizeKeys: ['small', 'medium', 'large'];
  $colorKeys: ['default', 'primary', 'accent', 'error'];

  button {
    appearance: none;
    display: inline-flex;
    font-family: inherit;
    border-style: none;
  }

  .gro-base-button {
    width: fit-content;
    font-family: 'Open Sans', sans-serif;
    background: none;
    user-select: none;
    cursor: pointer;
  }

  // Typography

  @each $size in $sizeKeys {
    .gro-base-button.gro-#{$size} {
      font-size: map-get(map-get($typography, $size), font-size);
      line-height: map-get(map-get($typography, $size), line-height);
      font-weight: map-get(map-get($typography, $size), font-weight);
    }
  }

  .gro-base-button.gro-small {
    padding: calc(var(--default-padding) * 2) calc(var(--default-padding) * 3);
    border-radius: var(--default-radius);
  }

  .gro-base-button.gro-medium {
    padding: calc(var(--default-padding) * 2) calc(var(--default-padding) * 3);
    border-radius: var(--default-radius);
  }

  .gro-base-button.gro-large {
    padding: calc(var(--default-padding) * 2) calc(var(--default-padding) * 4);
    border-radius: calc(var(--default-radius) * 2);
  }

  // Colors
  @each $color in $colorKeys {
    .gro-button.gro-#{$color} {
      color: map-get(map-get($colors, $color), color);

      &:hover {
        background: transparentize(map-get(map-get($colors, $color), color), 0.9);
      }
    }

    .gro-raised-button.gro-#{$color} {
      color: map-get(map-get($colors, $color), background);
      background-color: map-get(map-get($colors, $color), color);
      box-shadow: rgba(0, 0, 0, 0.12) 0 1px 3px, rgba(0, 0, 0, 0.24) 0 1px 2px;
    }

    .gro-icon-button.gro-#{$color} {
      color: map-get(map-get($colors, $color), color);
    }
  }
}
